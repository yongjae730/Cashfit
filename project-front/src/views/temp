<template>
  <v-main>
    <v-container fluid>
      <v-card class="mx-auto mt-4 rounded-lg" elevation="2">
        <v-card-title class="d-flex align-center py-4 px-4">
          <v-icon icon="mdi-bank" size="large" class="mr-2" color="primary" />
          <span class="text-h4 font-weight-bold">금융 상품</span>
        </v-card-title>
        <v-card-title class="d-flex align-center py-4 px-4">
          <v-spacer />
          <!-- 필터 버튼 -->
          <v-btn-toggle v-model="selectedFilter" multiple class="filter-buttons">
            <v-btn value="deposit">
              <v-icon color="blue" size="28">mdi-bank</v-icon>
              <span class="btn-text">예금</span>
            </v-btn>
            <v-btn value="freeSaving">
              <v-icon color="green" size="28">mdi-piggy-bank</v-icon>
              <span class="btn-text">자유적립식 적금</span>
            </v-btn>
            <v-btn value="regularSaving">
              <v-icon color="orange" size="28">mdi-calendar-text</v-icon>
              <span class="btn-text">정액적립식 적금</span>
            </v-btn>
          </v-btn-toggle>
          <v-spacer />
          <v-text-field v-model="search" prepend-inner-icon="mdi-magnify" label="검색" single-line hide-details density="compact" variant="outlined" class="max-width-200" />
        </v-card-title>

        <v-divider />

        <!-- 데이터 테이블 -->
        <div v-if="filteredList.length > 0" class="custom-table-container">
          <v-data-table :headers="headers" :items="filteredList" :search="search" hover fixed-header height="calc(100vh - 250px)" class="financial-table elevation-1" :items-per-page="-1">
            <template #item.fin_prdt_nm="{ item }">
              <router-link :to="`/product/${item.fin_prdt_cd}`" @click="setProduct(item)" class="text-decoration-none font-weight-medium text-primary">
                {{ item.fin_prdt_nm }}
              </router-link>
            </template>

            <!-- 동적으로 생성된 열 렌더링 -->
            <template v-for="header in headers.slice(2)" :key="header.value" #[`item.${header.value}`]="{ item }">
              <div v-if="Array.isArray(item[header.value])">
                <ul>
                  <li v-for="(detail, index) in item[header.value]" :key="index">
                    {{ detail }}
                  </li>
                </ul>
              </div>
              <div v-else>
                {{ item[header.value] }}
              </div>
            </template>
          </v-data-table>
        </div>
        <v-alert v-else type="info" class="mt-4">데이터가 없습니다.</v-alert>
      </v-card>
    </v-container>
  </v-main>
</template>

<script setup>
import axios from "axios";
import { ref, computed, onMounted } from "vue";
import { useFinStore } from "@/stores/financial";

const store = useFinStore();
const setProduct = (item) => {
  store.setSelectedProduct(item);
};
// 상태 및 검색 필터
const search = ref("");
const finList = ref([]); // API에서 받은 금융 상품 목록
const selectedFilter = ref([]); // 선택된 필터
const headers = ref([
  { text: "상품명", value: "fin_prdt_nm", align: "center", width: "150px" },
  { text: "은행명", value: "kor_co_nm", align: "center", width: "80px" },
]);

// API 데이터 가져오기
onMounted(async () => {
  try {
    const response = await axios.get("http://127.0.0.1:8000/api/financials/financial-products-with-options/");
    const products = response.data;

    // 모든 기간 추출 및 동적 헤더 생성
    const allTerms = new Set();
    products.forEach((product) => {
      if (Array.isArray(product.options)) {
        product.options.forEach((option) => {
          if (option.save_trm) {
            allTerms.add(`${option.save_trm}개월`);
          }
        });
      }
    });

    allTerms.forEach((term) => {
      headers.value.push({
        text: term,
        value: term,
        align: "center",
        width: "120px",
      });
    });

    // 데이터 매핑
    finList.value = products.map((item) => {
      let rsrvTypes = [];
      if (item.product_type === 0) {
        rsrvTypes = ["예금"]; // 예금인 경우
      } else if (item.options?.length) {
        rsrvTypes = item.options.map((option) => option.rsrv_type_nm).filter(Boolean); // 옵션에서 rsrv_type_nm 추출
      }

      // 중복 제거 및 문자열 결합
      const uniqueRsrvTypes = [...new Set(rsrvTypes)];
      return {
        ...item,
        rsrv_type_nm: uniqueRsrvTypes.join(", "), // 유형들을 문자열로 결합
      };
    });
  } catch (error) {
    console.error("Failed to fetch data:", error);
  }
});

// 데이터 매핑 및 동적 헤더에 따른 데이터 정리
const processedList = computed(() => {
  return finList.value.map((item) => {
    const row = { ...item };

    // 각 기간에 맞는 데이터를 추가
    if (Array.isArray(item.options)) {
      item.options.forEach((option) => {
        const term = `${option.save_trm}개월`;

        // 기존 데이터에 유형별로 데이터를 병합
        if (!row[term]) {
          row[term] = [];
        }
        row[term].push(`${option.intr_rate}% / ${option.intr_rate2}%`);
      });
    }

    return row;
  });
});

// 선택된 필터에 따른 목록 필터링
const filteredList = computed(() => {
  if (selectedFilter.value.length === 0) {
    return processedList.value;
  }

  return processedList.value.filter((item) => {
    if (selectedFilter.value.includes("deposit") && item.rsrv_type_nm.includes("예금")) {
      return true;
    }
    if (selectedFilter.value.includes("freeSaving") && item.rsrv_type_nm.includes("자유적립식")) {
      return true;
    }
    if (selectedFilter.value.includes("regularSaving") && item.rsrv_type_nm.includes("정액적립식")) {
      return true;
    }
    return false;
  });
});
</script>

<style>
/* 전역 스타일 */
.v-data-table-footer {
  display: none !important;
}

.custom-table-container {
  /* 스크롤바 스타일링 */
  & ::-webkit-scrollbar {
    width: 8px !important;
    height: 8px !important;
  }

  & ::-webkit-scrollbar-track {
    background: #f1f1f1 !important;
    border-radius: 4px !important;
  }

  & ::-webkit-scrollbar-thumb {
    background: #c1c1c1 !important;
    border-radius: 4px !important;
  }

  & ::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8 !important;
  }
}
</style>

<style scoped>
.filter-buttons {
  display: flex;
  align-items: center;
  justify-content: start;
  gap: 16px; /* 버튼 간 간격 추가 (수정된 부분) */
}

.filter-buttons .v-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 8px 16px; /* 버튼 내부 간격 조정 */
  min-width: 120px; /* 버튼 크기 균일화 */
}

.filter-buttons .btn-text {
  margin-left: 8px; /* 아이콘과 텍스트 사이 간격 추가 (수정된 부분) */
  font-size: 16px;
  font-weight: bold;
}

.financial-table {
  font-family: "Roboto", sans-serif;
}

.max-width-200 {
  max-width: 200px;
}

:deep(.v-data-table) {
  background: transparent !important;
}

:deep(.v-data-table-header) {
  background-color: #f5f5f5 !important;
}

:deep(.v-data-table-header th) {
  padding: 14px !important;
  font-weight: bold !important;
  color: rgba(0, 0, 0, 0.87) !important;
  font-size: 0.875rem !important;
}

:deep(.v-data-table-row:hover) {
  background-color: #f5f5f5 !important;
}

li {
  list-style-type: none;
}
</style>
